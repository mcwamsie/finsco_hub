from django.db import models

from configurations.models.base_model import BaseModel


class ProviderPaymentStatement(BaseModel):
    service_provider = models.ForeignKey('configurations.ServiceProvider', on_delete=models.CASCADE, related_name="payment_statements")

    # Statement Details
    statement_number = models.CharField(max_length=20, unique=True, editable=False, verbose_name="Statement Number")
    statement_date = models.DateField(verbose_name="Statement Date")
    period_from = models.DateField(verbose_name="Period From")
    period_to = models.DateField(verbose_name="Period To")

    # Amounts
    total_claims_amount = models.DecimalField(max_digits=20, decimal_places=2, default=0, verbose_name="Total Claims Amount")
    total_approved_amount = models.DecimalField(max_digits=20, decimal_places=2, default=0, verbose_name="Total Approved Amount")
    total_withheld_amount = models.DecimalField(max_digits=20, decimal_places=2, default=0, verbose_name="Total Withheld Amount")
    total_fees_amount = models.DecimalField(max_digits=20, decimal_places=2, default=0, verbose_name="Total Fees Amount")
    net_payment_amount = models.DecimalField(max_digits=20, decimal_places=2, default=0, verbose_name="Net Payment Amount")

    # Legal and Compliance Issues
    has_compliance_issues = models.BooleanField(default=False, verbose_name="Has Compliance Issues")
    compliance_notes = models.TextField(blank=True, null=True, verbose_name="Compliance Notes")

    # Missing Documents
    missing_documents = models.ManyToManyField('configurations.ServiceProviderDocumentType', blank=True,  related_name="statements_missing",  verbose_name="Missing Documents")
    expired_documents = models.ManyToManyField('configurations.ServiceProviderDocumentType', blank=True, related_name="statements_expired", verbose_name="Expired Documents")

    # Payment Status
    STATUS_CHOICES = [
        ("G", "Generated"),
        ("S", "Sent"),
        ("P", "Paid"),
        ("H", "On Hold"),
        ("C", "Cancelled"),
    ]
    status = models.CharField(max_length=1, choices=STATUS_CHOICES, default="G",
                              verbose_name="Statement Status")

    # Payment Details
    payment_method = models.ForeignKey('configurations.PaymentMethod', on_delete=models.SET_NULL, null=True, blank=True,  verbose_name="Payment Method")
    payment_reference = models.CharField(max_length=255, blank=True, null=True,  verbose_name="Payment Reference")
    payment_date = models.DateField(null=True, blank=True, verbose_name="Payment Date")

    # Generation Details
    generated_by = models.ForeignKey('authentication.User', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Generated By")
    generated_at = models.DateTimeField(auto_now_add=True, verbose_name="Generated At")

    def save(self, *args, **kwargs):
        if not self.statement_number:
            import datetime
            from sequences import Sequence
            date_str = datetime.datetime.now().strftime("%y%m")
            sequence_number = Sequence(f"payment_statement_{date_str}").get_next_value()
            self.statement_number = f"PS{date_str}{sequence_number:06d}"

        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.statement_number} - {self.service_provider.name}"

    class Meta:
        ordering = ["-statement_date"]
        verbose_name = "Provider Payment Statement"
        verbose_name_plural = "Provider Payment Statements"

