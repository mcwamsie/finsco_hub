# Generated by Django 5.2.4 on 2025-07-24 22:10

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounting', '0001_initial'),
        ('configurations', '0001_initial'),
        ('membership', '0001_initial'),
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='membertransaction',
            name='claim',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_transactions', to='services.claim'),
        ),
        migrations.AddField(
            model_name='membertransaction',
            name='processed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Processed By'),
        ),
        migrations.AddField(
            model_name='membertransaction',
            name='service_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_transactions', to='services.servicerequest'),
        ),
        migrations.AddField(
            model_name='membertransaction',
            name='top_up',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_transactions', to='membership.topup'),
        ),
        migrations.AddField(
            model_name='provideraccount',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_accounts', to='configurations.currency'),
        ),
        migrations.AddField(
            model_name='provideraccount',
            name='payment_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='provider_accounts', to='configurations.paymentmethod', verbose_name='Preferred Payment Method'),
        ),
        migrations.AddField(
            model_name='provideraccount',
            name='service_provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='configurations.serviceprovider'),
        ),
        migrations.AddField(
            model_name='providertransaction',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='accounting.provideraccount'),
        ),
        migrations.AddField(
            model_name='providertransaction',
            name='claim',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='provider_transactions', to='services.claim'),
        ),
        migrations.AddField(
            model_name='providertransaction',
            name='payment_statement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='services.providerpaymentstatement'),
        ),
        migrations.AddField(
            model_name='providertransaction',
            name='processed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Processed By'),
        ),
        migrations.AddField(
            model_name='providertransaction',
            name='withholding_document_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='configurations.serviceproviderdocumenttype', verbose_name='Related Document Type'),
        ),
        migrations.AddField(
            model_name='topupprocessing',
            name='top_up',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='processing_details', to='membership.topup'),
        ),
        migrations.AlterUniqueTogether(
            name='memberaccount',
            unique_together={('member', 'currency')},
        ),
        migrations.AlterUniqueTogether(
            name='provideraccount',
            unique_together={('service_provider', 'currency')},
        ),
    ]
